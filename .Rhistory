Models = [SVM_model, rf_Model, NN]
PCA_Models= [SVM_PCA_model, rf_PCA_Model, NN_PCA]
Model_name = ['Support Vector Classifier','Random Forest Classifier', 'Neural network']
AS = []
AS_PCA = []
for Model, PCA_Model in zip(Models, PCA_Models):
Predicted_labels= Model.predict(X_test_scaled)
PCA_Predicted_labels= PCA_Model.predict(PCA_test)
AS.append(accuracy_score(Predicted_labels, Y_test))
AS_PCA.append(accuracy_score(PCA_Predicted_labels, Y_test))
Accurracy_Store = pd.DataFrame(data=[AS, AS_PCA], columns=Model_name, index=['Standard', 'PCA'])
View(Accurracy_Store)
# 0.95 are the components parameter. It means that scikit-learn choose the minimum number of principal components such that 95% of the variance is retained.
PCA_SVC = PCA(.95)
PCA_SVC.fit(X_train_scaled)
#Number of PC's with 95% variance.
Number_of_PC = PCA_SVC.n_components_
#Apply the PCA fit
PCA_train = PCA_SVC.transform(X_train_scaled)
PCA_test = PCA_SVC.transform(X_test_scaled)
#Training the Support Vector classifier
SVM_model = svm.SVC(kernel='linear')
SVM_model.fit(X_train_scaled, Y_train)
#Training the Support Vector classifier
SVM_PCA_model = svm.SVC(kernel='linear')
SVM_PCA_model.fit(PCA_train, Y_train)
#TODO model is over fitted, so the attributes of the model needs to be designed better
rf_Model = RandomForestClassifier()
rf_Model.fit(X_train_scaled, Y_train)
#With PCA
rf_PCA_Model = RandomForestClassifier()
rf_PCA_Model.fit(PCA_train, Y_train)
NN = MLPClassifier(activation = 'logistic', solver = 'sgd', hidden_layer_sizes=(100), random_state=1, max_iter=3000)
NN.fit(X_train_scaled, Y_train)
NN_PCA = MLPClassifier(activation = 'logistic', solver = 'sgd', hidden_layer_sizes=(100), random_state=1, max_iter=3000)
NN_PCA.fit(PCA_train, Y_train)
Models = [SVM_model, rf_Model, NN]
PCA_Models= [SVM_PCA_model, rf_PCA_Model, NN_PCA]
Model_name = ['Support Vector Classifier','Random Forest Classifier', 'Neural network']
AS = []
AS_PCA = []
for Model, PCA_Model in zip(Models, PCA_Models):
Predicted_labels= Model.predict(X_test_scaled)
PCA_Predicted_labels= PCA_Model.predict(PCA_test)
AS.append(accuracy_score(Predicted_labels, Y_test))
AS_PCA.append(accuracy_score(PCA_Predicted_labels, Y_test))
Accurracy_Store = pd.DataFrame(data=[AS, AS_PCA], columns=Model_name, index=['Standard', 'PCA', ])
View(py_data)
quit
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, colour=V3)) + geom_point()
# Show the contour only PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, colour=status)) + geom_point() + geom_density_2d()
# Show the area only PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, colour=status)) + geom_point() + stat_density_2d(aes(fill = ..level..), geom="polygon")
# shows area + contour
ggplot(PCA2, aes(x=PC1, y=PC2, colour=status)) + geom_point() + stat_density_2d(aes(fill = ..level..), geom="polygon", colour="white")
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(status), colour=factor(status))) + geom_point()
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(V3), colour=factor(V3))) + geom_point()
# Show the contour only PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(V3), colour=factor(V3))) + geom_point() + geom_density_2d()
View(PCA2)
View(scal_PCA2Df)
View(scal_PCA2)
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(V3), colour=factor(V3))) + geom_point()
# Show the contour only PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(V3))) + geom_point() + geom_density_2d()
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(V3), colour=factor(V3))) + geom_point()
# Show the contour only PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + geom_density_2d()
# Show the area only PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(V3), colour=factor(V3))) + geom_point() + stat_density_2d(aes(fill = ..level..), geom="polygon")
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(PCA2, aes(x=V1, y=V2, group=factor(status), colour=factor(status))) + geom_point()
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(V3), colour=factor(V3))) + geom_point()
# Show the contour only PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + geom_density_2d()
# Show the area only PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(V3), colour=factor(V3))) + geom_point() + stat_density_2d(aes(fill = ..level..), geom="polygon")
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
Test <- scal_PCA2 dplyr:select(-V3)
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
Test <- scal_PCA2::dplyr::select(-V3)
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
Test <-  scal_PCA2 %>% select(-V3)
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
Test <-  scal_PCA2Df %>% select(-V3)
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(V3), colour=factor(V3))) + geom_point()
# Show the contour only PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + geom_density_2d()
# Show the area only PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(V3), colour=factor(V3))) + geom_point() + stat_density_2d(aes(fill = ..level..), geom="polygon")
View(Test)
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
Test <-  scal_PCA2Df %>% select(-V3)
Test <- PCA2 %>% select(status)
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(V3), colour=factor(V3))) + geom_point()
# Show the contour only PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + geom_density_2d()
# Show the area only PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(V3), colour=factor(V3))) + geom_point() + stat_density_2d(aes(fill = ..level..), geom="polygon")
View(Test)
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
Test <-  scal_PCA2Df %>% select(-V3)
Test <- PCA2 %>% select(V1, V2, status)
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
Test <-  scal_PCA2Df %>% select(-V3)
#Test <- PCA2 %>% select(V1, V2, status)
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(V3), colour=factor(V3))) + geom_point()
# Show the contour only PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + geom_density_2d()
# Show the area only PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(V3), colour=factor(V3))) + geom_point() + stat_density_2d(aes(fill = ..level..), geom="polygon")
View(Test)
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
Test <-  scal_PCA2Df %>% select(-V3)
Test2 <- PCA2 %>% select(status)
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(V3), colour=factor(V3))) + geom_point()
# Show the contour only PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + geom_density_2d()
# Show the area only PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(V3), colour=factor(V3))) + geom_point() + stat_density_2d(aes(fill = ..level..), geom="polygon")
View(Test2)
View(Test)
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
Test <-  scal_PCA2Df %>% select(-V3)
Test2 <- PCA2 %>% select(status)
Test3<-  Test %>% merge(Test2)
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(V3), colour=factor(V3))) + geom_point()
# Show the contour only PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + geom_density_2d()
# Show the area only PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(V3), colour=factor(V3))) + geom_point() + stat_density_2d(aes(fill = ..level..), geom="polygon")
View(Test3)
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
Test <-  scal_PCA2Df %>% select(-V3)
Test2 <- PCA2 %>% select(status)
scal_PCA2Df<-  Test %>% merge(Test2)
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(status), colour=factor(status))) + geom_point()
# Show the contour only PCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(status), colour=factor(status))) + geom_point() + geom_density_2d()
# Show the area only PCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(status), colour=factor(status))) + geom_point() + stat_density_2d(aes(fill = ..level..), geom="polygon")
# shows area + contour
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(status), colour=factor(status))) + geom_point() + stat_density_2d(aes(fill = ..level..), geom="polygon", colour="white")
View(scal_PCA2Df)
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
Test <-  scal_PCA2Df %>% select(-V3)
Test2 <- PCA2 %>% select(status)
scal_PCA2Df<-  Test %>% merge(Test2, by = "status", all = T)
View(Test)
View(Test2)
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
Test <-  scal_PCA2Df %>% select(-V3)
Test2 <- PCA2 %>% select(status)
scal_PCA2Df<-  Test %>% merge(PCA2, by = col(1), all = T)
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
Test <-  scal_PCA2Df %>% select(-V3)
Test2 <- PCA2 %>% select(status)
scal_PCA2Df<-  Test %>% merge(PCA2, by = col=(1), all = T)
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
Test <-  scal_PCA2Df %>% select(-V3)
Test2 <- PCA2 %>% select(status)
scal_PCA2Df<-  Test %>% merge(PCA2, by = 1, all = T)
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(status), colour=factor(status))) + geom_point()
# Show the contour only PCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(status), colour=factor(status))) + geom_point() + geom_density_2d()
# Show the area only PCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(status), colour=factor(status))) + geom_point() + stat_density_2d(aes(fill = ..level..), geom="polygon")
# shows area + contour
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(status), colour=factor(status))) + geom_point() + stat_density_2d(aes(fill = ..level..), geom="polygon", colour="white")
View(Test3)
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
Test <-  scal_PCA2Df %>% select(-V3)
Test2 <- PCA2 %>% select(status)
#scal_PCA2Df<-  Test %>% merge(PCA2, by = 1, all = T)
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(status), colour=factor(status))) + geom_point()
View(scal_PCA2Df)
View(scal_PCA2Df)
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
scal_PCA2Df['V3'][scal_PCA2Df['V3'] == 0.5714286] <- 1
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(status), colour=factor(status))) + geom_point()
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
scal_PCA2Df['V3'][scal_PCA2Df['V3'] == 0.5714286] <- 1
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(status), colour=factor(status))) + geom_point()
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
scal_PCA2Df <- scal_PCA2Df['V3'][scal_PCA2Df['V3'] == 0.5714286] <- 1
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(status), colour=factor(status))) + geom_point()
scal_PCA2Df
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
scal_PCA2Df['V3'][scal_PCA2Df['V3'] == 0.5714286] <- 1
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(status), colour=factor(status))) + geom_point()
View(scal_PCA2Df)
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
scal_PCA2Df['V3'][scal_PCA2Df['V3'] == '0.5714286'] <- 1
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(status), colour=factor(status))) + geom_point()
View(scal_PCA2Df)
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
scal_PCA2Df['V3'][scal_PCA2Df['V3'] == '0.5714286'] <- '1'
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(status), colour=factor(status))) + geom_point()
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
scal_PCA2Df['V3'][scal_PCA2Df['V3'] > 0] <- 1
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(status), colour=factor(status))) + geom_point()
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
scal_PCA2Df['V3'][scal_PCA2Df['V3'] > 0] <- 1
scal_PCA2Df['V3'][scal_PCA2Df['V3'] < 0] <- 0
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(status), colour=factor(status))) + geom_point()
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
scal_PCA2Df['V3'][scal_PCA2Df['V3'] > 0] <- 1
scal_PCA2Df['V3'][scal_PCA2Df['V3'] < 0] <- 0
data %>% rename(PC1 = V1, PC2 = V2, status = V3)
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
scal_PCA2Df['V3'][scal_PCA2Df['V3'] > 0] <- 1
scal_PCA2Df['V3'][scal_PCA2Df['V3'] < 0] <- 0
scal_PCA2Df %>% rename(PC1 = V1, PC2 = V2, status = V3)
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=V1, y=V2, group=factor(status), colour=factor(status))) + geom_point()
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
scal_PCA2Df['V3'][scal_PCA2Df['V3'] > 0] <- 1
scal_PCA2Df['V3'][scal_PCA2Df['V3'] < 0] <- 0
scal_PCA2Df %>% rename(PC1 = V1, PC2 = V2, status = V3)
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point()
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
scal_PCA2Df['V3'][scal_PCA2Df['V3'] > 0] <- 1
scal_PCA2Df['V3'][scal_PCA2Df['V3'] < 0] <- 0
scal_PCA2Df %>% rename(PC1 = V1, PC2 = V2, status = V3)
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point()
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
scal_PCA2Df['V3'][scal_PCA2Df['V3'] > 0] <- 1
scal_PCA2Df['V3'][scal_PCA2Df['V3'] < 0] <- 0
scal_PCA2Df <- scal_PCA2Df %>% rename(PC1 = V1, PC2 = V2, status = V3)
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point()
# Show the contour only PCA(n=2)
ggplot(scal_PCA2Df, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + geom_density_2d()
# Show the area only PCA(n=2)
ggplot(scal_PCA2Df, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_density_2d(aes(fill = ..level..), geom="polygon")
# shows area + contour
ggplot(scal_PCA2Df, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_density_2d(aes(fill = ..level..), geom="polygon", colour="white")
PCA2 <- py$plotDf
scal_PCA2 <- py$X_PCA_scaled
scal_PCA2Df <- as.data.frame(scal_PCA2)
scal_PCA2Df['V3'][scal_PCA2Df['V3'] > 0] <- 1
scal_PCA2Df['V3'][scal_PCA2Df['V3'] < 0] <- 0
scal_PCA2Df <- scal_PCA2Df %>% rename(PC1 = V1, PC2 = V2, status = V3)
# Scatter plot of PCA(n=2)
ggplot(PCA2, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Shows scatter of scaled dataPCA(n=2)
ggplot(scal_PCA2Df, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_ellipse()
# Show the contour only PCA(n=2)
ggplot(scal_PCA2Df, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + geom_density_2d()
# Show the area only PCA(n=2)
ggplot(scal_PCA2Df, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_density_2d(aes(fill = ..level..), geom="polygon")
# shows area + contour
ggplot(scal_PCA2Df, aes(x=PC1, y=PC2, group=factor(status), colour=factor(status))) + geom_point() + stat_density_2d(aes(fill = ..level..), geom="polygon", colour="white")
reticulate::repl_python()
View(Accurracy_Store)
quit
gc()
gc()
gc()
knitr::opts_chunk$set(echo = TRUE)
options(scipen=999)
library(ggplot2)
library(tidyverse)
library(tidymodels)
library(skimr)
library(stringr)
library(corrplot)
library(RColorBrewer)
library("PerformanceAnalytics")
library("Hmisc")
library(Rmisc)
library(lubridate)
library(ggbeeswarm)
library(GGally)
library(effsize)
library(magrittr)
library(dplyr)
library(reticulate)
library(raster)
library(sf)
df_questionnaire <- read.table("Questionnaire_data.csv", header=TRUE, fill = FALSE, sep=",")
df_physiological <- list.files(path = "./MED7 Eval data Physiological", full.names = T) %>%
map_dfr(read_csv, .id = "file_path") %>%
group_by(file_path) %>%
dplyr::mutate(ParticipantID = group_indices())
df_sample <- list.files(recursive = TRUE, path = "./MED7 testLogs", pattern = "Sample.csv",full.names = T) %>%
map_dfr(read_csv, .id = "file_path") %>%
group_by(file_path) %>%
dplyr::mutate(ParticipantID = group_indices())
df_sample <- df_sample %>% mutate(
minute = minute(Timestamp),
second = second(Timestamp))
df_sample <- df_sample %>% dplyr::select(-Framecount, -SessionID, -Email, -Event, -ParticipantID, -Timestamp)
df_sample[df_sample == 'NULL'] <- NA
df_event <- list.files(recursive = TRUE, path = "./MED7 testLogs", pattern = "Event.csv",full.names = T) %>%
map_dfr(read_csv, .id = "file_path") %>%
group_by(file_path) %>%
dplyr::mutate(ParticipantID = group_indices())
df_event <- df_event %>% mutate(
minute = minute(Timestamp),
second = second(Timestamp))
df_event <- df_event %>% dplyr::select(-Framecount, -SessionID, -Email, -ParticipantID, -Timestamp)
df_event[df_event == 'NULL'] <- NA
questionnaire_Summary <- df_questionnaire %>% dplyr::group_by(Participant) %>% dplyr::select(-Notes ) %>% na.omit()
physiological_Summary <- df_physiological %>% dplyr::group_by(file_path) %>% dplyr::select(file_path, EDA, IBI, -ParticipantID)
sample_Summary <- df_sample %>% dplyr::group_by(file_path)
event_Summary <- df_event %>% dplyr::group_by(file_path) %>% dplyr::select(-TestId, -PlayedPattern)
#dfSummary <-  dfSummary %>% merge(dsSummary, by = "Participant", all = T)
#Performance table for overview
Performance <- table(event_Summary$Event,  event_Summary$file_path)
Performance = t(Performance)
Performance <- as.data.frame.matrix(Performance)
#Added performance from the Event column to event_Summary
#https://www.marsja.se/r-add-column-to-dataframe-based-on-other-columns-conditions-dplyr/
#TODO For loop this
#Performance_columns <- c('SpawnedMole', 'SpawnedFakeMole', 'Shots', 'Misses', 'Hits', 'RedHit', 'Mole_Expired', 'Fake_Mole_Expired')
#Column_data <- c('Mole Spawned', 'Fake Mole Spawned', 'Pointer Shoot', 'Mole Missed', 'Mole Hit', 'Fake Mole Hit', 'Mole Expired', 'Fake Mole Expired')
#for (i in 1:length(Performance_columns))
#  for (j in 1:length(Column_data))
#    event_Summary <- event_Summary %>% mutate(Performance_columns[i] <-  case_when(Event == Column_data[j] ~ 1))
#spawns
event_Summary <- event_Summary %>% mutate(SpawnedMole =  case_when(Event == 'Mole Spawned' ~ 1))
event_Summary <- event_Summary %>% mutate(SpawnedFakeMole =  case_when(Event == 'Fake Mole Spawned' ~ 1))
#Shots
event_Summary <- event_Summary %>% mutate(Shots =  case_when(Event == 'Pointer Shoot' ~ 1))
#Hit and misses
event_Summary <- event_Summary %>% mutate(Misses =  case_when(Event == 'Mole Missed' ~ 1))
event_Summary <- event_Summary %>% mutate(Hits =  case_when(Event == 'Mole Hit' ~ 1))
event_Summary <- event_Summary %>% mutate(RedHit =  case_when(Event == 'Fake Mole Hit' ~ 1))
#Expired mole
event_Summary <- event_Summary %>% mutate(Mole_Expired =  case_when(Event == 'Mole Expired' ~ 1))
event_Summary <- event_Summary %>% mutate(Fake_Mole_Expired =  case_when(Event == 'Fake Mole Expired' ~ 1))
#TODO : missed Shots
#event_Summary <- event_Summary %>% mutate(MissedShot = Hits-Shots)
#TODO : Moles Missed
test1 <- event_Summary %>% dplyr::group_by(file_path) %>% dplyr::select(Event, SpawnedMole, SpawnedFakeMole, Shots, Misses, Hits, RedHit, Mole_Expired,  Fake_Mole_Expired)
#TODO : Compute the size based on the time column
size <- 161 # size of window ((3386/630)*30) which should be 30 sec
len <- nrow(test1) - size + 1 # number of sliding windows to perform
test1 <- test1 %>% replace(is.na(.), 0)
sumsmatrix <- apply(test1, 2, function(x)
cumsum(x)[size:nrow(test1)] - c(0,cumsum(x)[1:(len-1)]))
sample_Summary %>%
physiological_Summary  %>%
select(-file_path) %>%
skim()
right.df <- data.frame( x = sample_Summary$RightControllerPosWorldX,
y = sample_Summary$RightControllerPosWorldY,
z = sample_Summary$RightControllerPosWorldZ,
group = sample_Summary$file_path)
right.df <- st_as_sf(right.df,coords = c("x","y","z"),remove = F)
right.df <- right.df %>%
group_by(group) %>%
dplyr::mutate(
lead = geometry[(dplyr::row_number()) + 1],
dist = st_distance(geometry, lead, by_element = T),
)
View(event_Summary)
View(test1)
